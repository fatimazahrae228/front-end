import { CommonModule } from '@angular/common';
import { HttpClient , HttpHeaders, HttpParams } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { DbSidebarComponent } from '../db-sidebar/db-sidebar.component';
import { DbSidebarForComponent } from '../db-sidebar-for/db-sidebar-for.component';
import { DbNavbarComponent } from '../db-navbar/db-navbar.component';
import { MatIcon } from '@angular/material/icon';
import { DbSidebarEtuComponent } from '../db-sidebar-etu/db-sidebar-etu.component';

import { environment } from '../../environments/environment';
interface Cours {
  id: number;
  titre: string;
  type: 'Gratuit' | 'Payant';
  prix?: number;
  isPaid?: boolean;
  pdfUrlView?: string;
  pdfUrlDownload?: string;
}
interface environment {
  production: false,
  apiUrl: 'http://localhost:8081',
  paypalClientId: 'AVq2IR0GVancIJPhb0lYTXyrX6nMoF1EP35EGZt3uVkLpDcY4oJ-80iOoh6ASbpHwn5GZCsxULqDCa3x', 
};


declare const paypal: any;
@Component({
  selector: 'app-cours',
  standalone: true,
  imports: [ MatIcon , FormsModule ,CommonModule , DbNavbarComponent, DbSidebarComponent , DbSidebarForComponent , DbSidebarEtuComponent ],
  templateUrl: './cours.component.html',
  styleUrl: './cours.component.css'
})
  export class CoursComponent implements OnInit {
  
    showAddModal = false;
     showDeleteModal = false;
  user = {
    id: '',
    nom: '',
    prenom: '',
    etat: '',
    numTelephone: '',
    email: '',
    photoUrl: 'assets/user-profile.jpg',
  };

  nouveauCours = {
    titre: '',
    niveau: '',
    type: '',
    documentType:'',
    filiere: '',
    prix: 0 ,
    user: { id: null as number | null }
  };

   isLiked: boolean = false;

  rechercheCours = {
    titre: '',
    niveau: '',
    type: '',
    documentType:'',
    filiere: '',
    prix: 0
  };
  

  selectedFile: File | null = null;
  message: string = '';
  listeCours: any[] = [];
  coursFiltresAppliques: any[] = [];
  likedCourses: { [id: number]: boolean } = {};
  likesCount: { [id: number]: number } = {};
userId : number | null = null ;
  private baseUrl = 'http://localhost:8081/api/evaluations';
  

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
  this.getCours();
  this.setFormateurFromLocalStorage();
  this.loadAllLikesCounts();
  this.loadCourses();
  this.loadPaypalScript(); // important

  const storedUser = localStorage.getItem('user');
  if (storedUser) {
    try {
      const id = JSON.parse(storedUser).id;
      this.http.get<any>(`http://localhost:8081/users/${id}`).subscribe(data => {
        this.user = data;
        localStorage.setItem('user', JSON.stringify(data));
        this.loadUserEvaluations();

        // ✅ Appeler après avoir reçu le user
        this.getCoursPayants();
      });
    } catch (e) {
      console.error("Erreur parsing JSON:", e);
    }
  }
}
  
loadCourses(): void {
  this.http.get<any[]>('http://localhost:8081/api/cours')
    .subscribe(data => {
      this.courses = data;
      this.loadAllLikesCounts(); // Maintenant qu’on a les cours
    });
}

getCours(): void {
  this.http.get<any[]>('http://localhost:8081/api/cours').subscribe(data => {
    this.listeCours = data;

    this.listeCours.forEach(cours => {
      const extension = cours.fichierNom?.split('.').pop()?.toLowerCase();

      let fileType = 'autre';
      if (extension) {
        if (['jpg', 'jpeg', 'png', 'gif'].includes(extension)) {
          fileType = 'image';
        } else if (['mp4', 'avi', 'mov', 'webm'].includes(extension)) {
          fileType = 'video';
        } else if (extension === 'pdf') {
          fileType = 'pdf';
        }
        
      }

      cours.fileType = fileType;

      // Ajouter les URLs de visualisation / téléchargement
      cours.pdfUrlView = this.getPdfUrl(cours.id, false);
      cours.pdfUrlDownload = this.getPdfUrl(cours.id, true);
    
         
    });

    this.coursFiltresAppliques = [...this.listeCours]; // Copie pour les filtres
  });
}

 openModal(type: 'add' | 'delete' | 'payer') {
  if (type === 'add') {
    this.showAddModal = true;
  } else if (type === 'delete') {

    this.showDeleteModal = true;

    const user = JSON.parse(localStorage.getItem('user')!);
    const userId = user?.id; // extrait l'ID

    if (userId) {
      this.http.get<any[]>(`http://localhost:8081/api/cours/formateur/${userId}`)
        .subscribe(cours => {
          this.courses=cours;
          
          
          console.log("Cours du formateur :", cours);
          // tu peux les stocker dans un tableau si besoin
        });
    }
   
    
    else {
      console.error("Aucun ID utilisateur trouvé dans le localStorage.");
    }
  } else if(type === 'payer'){
    this.showPayerModal = true;
    }
}

  closeModal(type: 'add' | 'delete' | 'payer' ) {
    if(type=='add'){
    this.showAddModal = false;
    this.resetCours();
    }
    else if (type=='delete'){
    this.showDeleteModal = false;

    }
 else if (type=='payer'){
      this.showPayerModal = false;
    this.selectedCourseId = null;
  }}




  onFileSelected(event: any) {
    this.selectedFile = event.target.files[0];
  }

  submitCours() {
    const formData = new FormData();
    formData.append('titre', this.nouveauCours.titre);
    formData.append('niveau', this.nouveauCours.niveau);
    formData.append('type', this.nouveauCours.type);
    formData.append('filiere', this.nouveauCours.filiere);
    formData.append('documentType', this.nouveauCours.documentType);
    formData.append('prix', this.nouveauCours.prix.toString());

    if (this.nouveauCours.user.id !== null) {
      formData.append('userId', this.nouveauCours.user.id.toString());
    }

    if (this.selectedFile) {
      formData.append('fichier', this.selectedFile);
    }

    this.http.post('http://localhost:8081/api/cours', formData).subscribe({
      next: () => {
        alert('Cours ajouté avec succès !'),
        this.getCours();
      },
      error: () => {
        alert('Erreur lors de l\’ajout du cours.')
      }
    });
  }

  resetCours() {
    const userId = this.nouveauCours.user.id;
    this.nouveauCours = {
      titre: '',
      niveau: '',
      type: '',
      documentType:'',
      filiere: '',
      prix: 0,
      user: { id: userId }
    };
    this.selectedFile = null;
    this.message = '';
  }

  setFormateurFromLocalStorage() {
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      try {
        const user = JSON.parse(storedUser);
        this.nouveauCours.user.id = user.id || null;
      } catch (error) {
        console.error('Erreur parsing JSON:', error);
      }
    }
  }

  ouvrirPdf(url: string) {
    window.open(url, '_blank');
  }

  telechargerPdf(pdfUrl: string): void {
    const link = document.createElement('a');
    link.href = pdfUrl;
    link.download = pdfUrl.split('/').pop() || '';
    link.click();
  }

  getPdfUrl(coursId: number, isDownload: boolean): string {
    const cours = this.listeCours.find(c => c.id === coursId);
    if (!cours || !cours.fichierNom) return '';
    const fileName = cours.fichierNom;
    return `http://localhost:8081/api/cours/${isDownload ? 'download' : 'view'}/${fileName}`;
  }


  appliquerFiltre() {
    this.coursFiltresAppliques = this.listeCours.filter(cours => {
      return (
        (!this.rechercheCours.titre || cours.titre.toLowerCase().includes(this.rechercheCours.titre.toLowerCase())) &&
        (!this.rechercheCours.filiere || cours.filiere == this.rechercheCours.filiere) &&
        (!this.rechercheCours.niveau || cours.niveau == this.rechercheCours.niveau) &&
        (!this.rechercheCours.type || cours.type == this.rechercheCours.type)&&
        (!this.rechercheCours.documentType || cours.documentType == this.rechercheCours.documentType)&&
        (!this.rechercheCours.prix || cours.prix == this.rechercheCours.prix)
      );
    });
  }
  
  
  loadUserEvaluations(): void {
    this.http.get<any[]>(`http://localhost:8081/api/evaluations/user/${this.user.id}`)
      .subscribe(evals => {
        evals.forEach(e => {
          if (e.note == 1) {
            this.likedCourses[e.cours.id] = true;
          }
        });
      });
  }

courses: any[] = [];

  loadAllLikesCounts(): void {
  this.courses.forEach((c: any) => this.loadLikesCount(c.id));
}

  loadLikesCount(coursId: number): void {
    this.http.get<number>(`http://localhost:8081/api/evaluations/likes/${coursId}`)
      .subscribe(count => this.likesCount[coursId] = count);
  }

  toggleLike(coursId: number): void {
    const isLiked = this.likedCourses[coursId];

    if (!isLiked) {
      // Like : POST
      const params = new HttpParams()
        .set('coursId', coursId)
        .set('userId', this.user.id)
        .set('note', '1');

      this.http.post('http://localhost:8081/api/evaluations/add', {}, {
         params, 
          responseType:'text'
        })
        .subscribe(() => {
          this.likedCourses[coursId] = true;
          this.loadLikesCount(coursId);
        });

    } else {
      // Unlike : DELETE
      const params = new HttpParams()
        .set('coursId', coursId)
        .set('userId', this.user.id);

      this.http.delete('http://localhost:8081/api/evaluations/delete', { 
        params,
        responseType:'text'
       })
        .subscribe(() => {
          this.likedCourses[coursId] = false;
          this.loadLikesCount(coursId);
        });
    }
  }
    onTypeChange() {
  if (this.nouveauCours.type !== 'Payant') {
    this.nouveauCours.prix = 0 }
}
SupprimerCours(cours: any): void {
  if (confirm("Est-ce que tu es sûr de vouloir supprimer ce module ?")) {
    this.http.delete(`http://localhost:8081/api/cours/${cours.id}`, { responseType: 'text' }).subscribe({
      next: (response) => {
        alert('Module supprimé avec succès !');
         this.courses = cours;             // stocke la liste complète
        this.coursFiltresAppliques = this.coursFiltresAppliques.filter(c => c.id !== cours.id);
      },
      error: (error) => {
        console.error('Erreur lors de la suppression du cours', error);
        alert('Échec de la suppression du module.');
      }
    });
  }
}



 showPayerModal = false;
 coursPayants: Cours[] = [];
  selectedCourseId: number | null = null;
  paymentProcessing = false;
  API_URL = environment.apiUrl;
 
 
loadPaypalScript(): void {
    if (document.getElementById('paypal-sdk')) return;

    const script = document.createElement('script');
    script.id = 'paypal-sdk';
    script.src = `https://www.paypal.com/sdk/js?client-id=${environment.paypalClientId}&currency=USD`;
    script.onload = () => console.log('PayPal SDK chargé');
    script.onerror = () => console.error('Erreur de chargement PayPal');
    document.body.appendChild(script);
  }

  getCoursPayants(): void {
    this.http.get<Cours[]>(`${this.API_URL}/api/cours`).subscribe(data => {
      this.coursPayants = data.filter(c => c.type == 'Payant');
      this.coursPayants.forEach(cours => {
        cours.pdfUrlView = `${this.API_URL}/api/cours/view/${cours.id}`;
        cours.pdfUrlDownload = `${this.API_URL}/api/cours/download/${cours.id}`;
        this.checkIfPaid(cours);
      });
    });
  }

 checkIfPaid(cours: Cours): void {
  const userId = this.user.id;

  this.http.get<boolean>(`${this.API_URL}/api/payments/check?userId=${userId}&courseId=${cours.id}`)
    .subscribe((paid: boolean) => {
      cours.isPaid = paid;
      console.log("est-ce que le cours est payé ?", cours.isPaid);
    }, error => {
      console.error("Erreur lors du check de paiement :", error);
    });
}


  initierPaiement(cours: Cours): void {
    if (cours.isPaid || this.paymentProcessing) return;

    const containerId = `paypal-button-${cours.id}`;
    const container = document.getElementById(containerId);
    if (container) container.innerHTML = '';

    this.paymentProcessing = true;
    this.selectedCourseId = cours.id;

    setTimeout(() => {
      paypal.Buttons({
        createOrder: (data: any, actions: any) => {
          return actions.order.create({
            purchase_units: [{
              amount: {
                value: this.convertDhToUsdNumber(cours.prix || 0),
                currency_code: 'USD'
              }
            }]
          });
        },
        onApprove: async (data: any, actions: any) => {
          await actions.order.capture();
          cours.isPaid = true;
          this.enregistrerPaiement(cours);
        },
        onCancel: () => {
          this.paymentProcessing = false;
        },
        onError: (err: any) => {
          console.error('Erreur PayPal:', err);
          this.paymentProcessing = false;
        }
      }).render(`#${containerId}`);
    }, 300);
  }

  enregistrerPaiement(cours: Cours): void {
    const data = {
      userId: this.user.id,
      courseId: cours.id,
      amount: cours.prix,
      paymentDate: new Date().toISOString()
    };

    const headers = new HttpHeaders({
      'Content-Type': 'application/json'
    });

    this.http.post(`${this.API_URL}/api/payments`, data, { headers })
      .subscribe({
        next: () => {
          this.paymentProcessing = false;
          this.selectedCourseId = null;
          alert('Paiement enregistré avec succès');
        },
        error: (err) => {
          console.error('Erreur backend:', err);
          this.paymentProcessing = false;
        }
      });
  }

  convertDhToUsdNumber(dh: number): string {
    return (dh / 10).toFixed(2);
  }
  ouvrirPdff(url?: string) {
  if (url) window.open(url, '_blank');
}
telechargerPdff(pdfUrl?: string): void {
  if (!pdfUrl) {
    console.error('Lien de téléchargement invalide');
    return;
  }
  const link = document.createElement('a');
  link.href = pdfUrl;
  link.download = pdfUrl.split('/').pop() || '';
  link.click();
}

methode(cours: Cours) {
  this.openModal('payer');
  this.initierPaiement(cours);
}



  }
  